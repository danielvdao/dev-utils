filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-sleuth'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rvm'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'kchmck/vim-coffee-script'
Plugin 'vim-ruby/vim-ruby'
Plugin 'jremmen/vim-ripgrep'

" nerd tree remaps
map <C-h> :tabp<CR>
map <C-l> :tabn<CR>

" keyboard remaps
inoremap jk <Esc> " remap normal mode to jk, my wrist hurts
let mapleader = ','
nmap <leader><space> :call DeleteTrailingWS()<CR>
nmap <leader>d :NERDTreeToggle<CR> " remap nerdtree toggle
nmap <leader>pi :PluginInstall<CR> " typing is hard
nmap <leader>r :so ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
nmap <leader>s :CtrlP<CR>
nmap <leader>c :CtrlPClearCache<CR>

" format JSON
map <C-j> :$!python -mjson.tool<CR>

call vundle#end()
filetype plugin indent on
colorscheme Tomorrow-Night
syntax on
set hlsearch " hlsearch lists everything when searching
set nu " line nu
set smartcase
set list
set ruler
set listchars=tab:▸\ ,trail:▫
au BufNewFile,BufRead *.sql.jinja set filetype=sql
au BufNewFile,BufRead *.swigql set filetype=sql

" set syntax checkers
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set bs=indent,eol,start     " Backspace over everything in insert mode
let g:syntastic_javascript_checkers = ['eslint'] " JS syntax checker
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0 " this keeps the list on all the time
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1

set wildignore+=*/.git/*,*/tmp/*,*.swp " set to ignore for ripgrep

" need either macvim or --with-client-server from normal vim overridden via
" brew to use this feature
if has("clipboard")
  set clipboard=unnamed " copy to the system clipboard
  if has("unnamedplus") " X11 support
    set clipboard+=unnamedplus
  endif
endif

" delete trailing white spaces
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
endif

" disable screen redraw caching
set nocompatible
set lazyredraw
set ttyfast
